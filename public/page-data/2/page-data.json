{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/2/",
    "result": {"data":{"markdownRemark":{"html":"<h2>分離</h2>\n<p>難しい問題を解決する手段の一つは、問題を分けて考えることです。</p>\n<p>デカルトが『方法序説』で「困難は分割せよ」と言っていますが、これはとても大切なことです。</p>\n<p>そして、難しい問題だけでなく、あらゆるプログラミングに普遍的に当てはまることであろうと思っています。</p>\n<p>例えば、「ユーザーがランダムに選ばれた選択肢に回答すると、データ分析して、ユーザーに最も相応しいアルバイトをおすすめする」というアプリでは、以下のような切り分け方ができます。</p>\n<ol>\n<li>ランダムに選択肢を生成し、ユーザーに表示する。</li>\n<li>ユーザーの回答をフロントからサーバーが受け取り、データ分析するアプリにそのデータを渡す。</li>\n<li>データ分析する。</li>\n<li>データ分析の結果をサーバーに渡す。</li>\n<li>サーバーは結果をフロントに渡す。</li>\n<li>結果をユーザーに表示する。</li>\n</ol>\n<p>切り分ける時に重要なことは、それぞれが独立するようにすることです。</p>\n<p>このように切り分けることで、フロントエンドエンジニア、サーバーサイドエンジニア、データサイエンティストは、それぞれのタスクに集中できます。</p>\n<p>すなわちデータサイエンティストは、2ではデータの受け取り方、3ではデータ分析、4ではデータの渡し方を考えるだけでよくなります。\nランダムな生成の仕方であったり、ユーザーへの表示の仕方、デザイン、サーバーからフロントへのデータの受け渡し方などを考慮する必要はなくなります。</p>\n<p>問題が発生した場合は、それぞれのステップで確認します。</p>\n<p>分離により、ある機能の中身とデータの受け渡し方さえ考えればよく、それ以外の機能の振る舞いについて考える必要がなくなります。</p>\n<h2>共通化</h2>\n<p>分離も重要ですが、他方で共通化も重要です。</p>\n<p>ある機能をする関数と似た機能をする関数は共通化することで、コーディングを減らしたり、バグを減らしたりできます。</p>\n<p>例えば、以下のようなボタンがある場合を考えてみます。</p>\n<p>ボタンA</p>\n<ul>\n<li>水色</li>\n<li>影がついている。</li>\n<li>角は丸くなってる。</li>\n<li>幅は120px。</li>\n<li>高さは40px。</li>\n</ul>\n<p>ボタンB</p>\n<ul>\n<li>赤色。</li>\n<li>影がついている。</li>\n<li>角は丸くなってる。</li>\n<li>幅は120px。</li>\n<li>高さは40px。</li>\n</ul>\n<p>この時共通化してこのようにできます。</p>\n<p>ボタン</p>\n<ul>\n<li>無色。</li>\n<li>影がついている。</li>\n<li>角は丸くなってる。</li>\n<li>幅は120px。</li>\n<li>高さは40px。</li>\n</ul>\n<p>ボタンA(ボタンを継承)</p>\n<ul>\n<li>水色。</li>\n</ul>\n<p>ボタンB(ボタンを継承)</p>\n<ul>\n<li>赤色。</li>\n</ul>\n<p>このようにして、ボタンをコンポーネント(部品)として扱えるようになります。</p>\n<p>可能な限り分離して、似ている部分を共通化することが肝要です。</p>\n<h2>質問</h2>\n<p>プログラミングをしていると質問したい事柄が出てくると思います。したがって質問の仕方についても確認しておきます。</p>\n<p>個人作業している時は、20分考えても分からなければ質問してください。</p>\n<p>:warning: チームで進めている時は、即座に聞いてください。</p>\n<p>質問する時は、使用しているOSも同時に教えてください。OSによって回答が異なる場合があるからです。</p>","frontmatter":{"title":"Principles"}}},"pageContext":{"slug":"/2/"}},
    "staticQueryHashes": ["3649515864"]}