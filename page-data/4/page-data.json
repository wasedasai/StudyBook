{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/4/",
    "result": {"data":{"markdownRemark":{"html":"<h1>Chapter4 Basic Node.js &#x26; Nuxt.js</h1>\n<p>第四章では、Node.jsをインストールしながら、Nuxtを概観します。この章の最終ゴールは、早稲田祭2020のフロントエンドをあなたのブラウザで閲覧できるようにして、コードで遊べるようにすることです。</p>\n<p><img src=\"https://user-images.githubusercontent.com/65198192/132185160-53a1165c-62f2-4c5b-ab05-0ba85fe39dbc.png\" alt=\"chapter4\"></p>\n<h2>第一節 Nuxt（ナクスト）とVue（ビュー）</h2>\n<p>早稲田祭のサイトのフロントエンドは、Nuxtで作ります。</p>\n<p>NuxtとはJavaScriptのライブラリであるVueのフレームワークのことです。ライブラリとフレームワークについて解説します。</p>\n<ul>\n<li>ライブラリを用いることで、特定の文脈で特定の書き方に従えば、ある機能を言語本来の書き方よりも遙かに少ないコーディングで実現できます。</li>\n<li>フレームワークを用いることで、特定のルールをチームに強制し、開発での統一性を保ちます。同時に一定の処理をフレームワーク側で実行することで、私たちの負担を減らします。</li>\n</ul>\n<p>代表的なJavaScriptのライブラリを紹介します。</p>\n<ul>\n<li>jQuery：アニメーションにおいて強力なライブラリで、複雑な動作を実現できます。コーディング時に参考になるサイトが豊富です。</li>\n<li>React：コンポーネント指向に基づく最も有力なライブラリの一つです。HTMLとCSSを部品化するコンポーネント指向を導入することで、チーム開発において驚異的なパフォーマンスをしてくれます。一方で高いコーディングスキルが求められるので、習得が簡単ではありません。</li>\n<li>Vue：このライブラリの哲学は、「Reactよりも簡単に使える」です。コンポーネント指向を導入し、チーム開発に素晴らしい活躍をます。同時に、簡単に導入出来て、簡単に使うことができます。</li>\n</ul>\n<p>フレームワークはライブラリ次第で決まります。一般的には以下の組み合わせで使います。なおjQueryに代表的なフレームワークはありません。</p>\n<ul>\n<li>React × Next</li>\n<li>Vue × Nuxt</li>\n</ul>\n<p>:warning:フレームワークを必ずしも使わなければならない理由はありません。中規模以上のサイトにはフレームワークを利用した方がいいという印象です。</p>\n<p>:warning:フレームワークは一つしか使えませんが、ライブラリは複数導入できます。例えばjQueryをReactやVueに導入することもできます。一方でReactとVueを同時に使うことはありえません。違う面で素晴らしい能力を発揮するライブラリを組み合わせて使います。</p>\n<h2>第二節 必要性</h2>\n<p>NuxtとVueが必要になる理由を知ることで、Webに関する知識をもう少し深めます。</p>\n<p>早稲田祭のサイトは、企画詳細ページを含めて300ページ以上にも及びます。HTMLとCSSだけで制作するには人員も時間も足りません。</p>\n<p>300ページ以上にも及ぶ早稲田祭のサイトですが、大半を占める企画詳細ページは、一つの型にデータベースから得た掲載情報を流し込むことで表示することができます。</p>\n<p>それを実現するためにVueを使います。チーム開発になるのでNuxtを使ってコードやフォルダ管理で統一性を保ちます。これがNuxtとVueが必要になる理由です。</p>\n<blockquote>\n<p>企画詳細ページだけにVueを導入する案を考慮しました。\n残念ながらこの案は採用できません。企画詳細ページをシェアできないという最大の欠点を抱えるからです。</p>\n</blockquote>\n<h2>第三節 Node.jsとは</h2>\n<p>Node.jsについては、<a href=\"https://qiita.com/non_cal/items/a8fee0b7ad96e67713eb\">Node.jsとはなにか？なぜみんな使っているのか？</a>を読んでください。</p>\n<p>これを読んでから次の章に進んでください。</p>\n<h2>第四節 Node.jsインストール</h2>\n<p>MacとWindowsでインストール方法が異なります。いずれの方法でもNode.jsのバージョンを管理するためのツールを使います。</p>\n<p>インストールするNode.jsのバージョンは、<a href=\"https://nodejs.org/en/\">Node.jsの公式サイト</a>でLTSと表示されているバージョンを使うのが良いです。チームで共通のバージョンを使うことに注意してください。</p>\n<p>説明時に「パスを通す」という表現があります。これは、インストールしたものをどこからでも使えるようにシステムに登録することです。パスが通ってない場合、「~というコマンドが見つかりません」などのエラーが表示されます。</p>\n<h3>:dizzy:MacOS</h3>\n<p>MacOSでnode.jsをインストールする方法は二つあります。</p>\n<h4>:sparkles:NodebrewでNode.jsをインストールする</h4>\n<p>MacではNode.jsのバージョンを管理するためにHomebrewとnodebrewを使います。</p>\n<p>:one: ターミナルに貼り付けてエンター、<code class=\"language-text\">PRESS RETURN ~~</code>が出てきたらエンター押します。Installが始まるので待ちます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ /bin/bash -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class=\"token variable\">)</span></span>\"</span></code></pre></div>\n<p>:two: nodebrewをインストールして何らかのバージョンが表示されることを確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> nodebrew\n$ nodebrew -v</code></pre></div>\n<p>:three: nodebrewのパスを通す準備にします。</p>\n<ul>\n<li>bashを使っている場合</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> ~/.bash_profile</code></pre></div>\n<ul>\n<li>zshを使っている場合</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> ~/.zshrc</code></pre></div>\n<p>viが開けたら、<code class=\"language-text\">i</code>キーを押下しviのインサートモード（編集モード）に入ります。以下の文字列をコピペします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export PATH=$HOME/.nodebrew/current/bin:$PATH</code></pre></div>\n<p><code class=\"language-text\">ESC</code>キー押下してノーマルモードに戻ります。次に<code class=\"language-text\">:wq</code>を順に押して保存します。</p>\n<p>:four: nodebrewのパスを通します</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">source</span> ~/.bash_profile\n$ nodebrew setup</code></pre></div>\n<p>:five: バージョンを指定してNode.jsをインストールします。最後のコマンドで指定のバージョンが表示されれば成功です。</p>\n<p>:warning:<code class=\"language-text\">&lt;Version></code>にチーム指定のバージョンを入力してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nodebrew install-binary v<span class=\"token operator\">&lt;</span>Version<span class=\"token operator\">></span>\n$ nodebrew use v<span class=\"token operator\">&lt;</span>Version<span class=\"token operator\">></span>\n$ node -v</code></pre></div>\n<h4>:sparkles:NodenvでNode.jsをインストールする</h4>\n<p>:one: nodenvをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone git://github.com/nodenv/nodenv.git ~/.nodenv</code></pre></div>\n<p>:two: nodenvの動作を高速化するコマンドを打ちます。失敗しても問題ありません。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> ~/.nodenv <span class=\"token operator\">&amp;&amp;</span> src/configure <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> -C src</code></pre></div>\n<p>:three: ターミナルのタイプを確認します。Macのターミナルは、<code class=\"language-text\">Bash</code>か<code class=\"language-text\">Zsh</code>を使っているので、どちらを使っているか確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$ZSH_VERSION</span>\n数字が表示された場合zshを使用しています\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$BASH_VERSION</span>\n数字が表示された場合bashを使用しています</code></pre></div>\n<p>:four: nodenvにパスを通します。<code class=\"language-text\">Zsh</code>を使っている場合は、<code class=\"language-text\">.bash_profile</code>を<code class=\"language-text\">.zshrc</code>に変更してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=\"$HOME/.nodenv/bin:$PATH\"'</span> <span class=\"token operator\">>></span> ~/.bash_profile</code></pre></div>\n<p>:five: nodenvをセットアップします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ~/.nodenv/bin/nodenv init</code></pre></div>\n<p>:six: パスの更新をターミナルに適用するため、一旦ターミナルを閉じて、再度開きます。次に下のコマンドを実行して、バージョンが表示されることを確認してください。表示されない場合はチームに報告！</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nodenv -v</code></pre></div>\n<p>:seven: nodenvの拡張パッケージであるnode-buildをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> -p <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>nodenv root<span class=\"token variable\">)</span></span>\"</span>/plugins\n$ <span class=\"token function\">git</span> clone https://github.com/nodenv/node-build.git <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>nodenv root<span class=\"token variable\">)</span></span>\"</span>/plugins/node-build</code></pre></div>\n<p>:eight: Node.jsをインストールし、どの階層でも使えるようにグローバルに設定します。</p>\n<p>:warning:<code class=\"language-text\">&lt;Version></code>にチーム指定のバージョンを入力してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nodenv <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>Version<span class=\"token operator\">></span>\n$ nodenv global <span class=\"token operator\">&lt;</span>Version<span class=\"token operator\">></span></code></pre></div>\n<h3>:dizzy:Windows</h3>\n<p>WindowsではNode.jsのバージョンを管理するためにnodistを使います。</p>\n<p><a href=\"https://qiita.com/satoyan419/items/56e0b5f35912b9374305\">nodistでNode.jsをバージョン管理</a>を読んで頑張ってください。この記事の「Node.jsのインストール」まで完了してください。</p>\n<p>:warning:Node.jsはチーム指定のバージョンを入力してください。それ以外は最新バージョンで問題ありません。</p>\n<p>:warning:CUIはGit Bashを使ってください。<code class=\"language-text\">Windows</code>キーを押下して、<code class=\"language-text\">Git Bash</code>と入力してエンターすればGit Bashが開かれます・</p>\n<h2>第五節 os2020-frotをブラウザで見よう</h2>\n<p>:one: ターミナル/Git Bashを開いて、<code class=\"language-text\">npm</code>のバージョンを確認します。表示されることが重要で、チームで完全に同じである必要はないです。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> -v</code></pre></div>\n<p>:two: Yarnをnpmでインストールし、バージョンを確認、初期設定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g <span class=\"token function\">yarn</span>\n$ <span class=\"token function\">yarn</span> -v</code></pre></div>\n<p>:three: 第四章でインストールした<code class=\"language-text\">os2020-front</code>のインストールされた階層に<code class=\"language-text\">cd</code>コマンドを使って移動して、次のコマンドを実行します。（もしくはVSCodeで<code class=\"language-text\">os2020-front</code>を開いて、<code class=\"language-text\">Ctrl</code>を押しながら<code class=\"language-text\">@</code>キーを押下するとターミナルが使えます。Git Bashに変更して次のコマンドを実行します。変更方法はネットで探してください。）</p>\n<p>パッケージをたくさんインストールするので時間がかかります。待ちましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">install</span></code></pre></div>\n<p>:four: コマンドが打てる状況になったら、次のコマンドを実行します。これもまた時間がかかります。しばらくしたら<code class=\"language-text\">http://localhost:2020</code>をブラウザで開いてください。</p>\n<p>:warning:「途中で開発に協力しますか」的な質問がありますが、<code class=\"language-text\">n</code>と答えてエンターしてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ yarn dev</code></pre></div>\n<h2>お疲れ様！！</h2>\n<p>2020年度のサイトが表示されたら完了です！\nこれで環境構築も終わりです。次回はチーム開発の基本と流れ、コンポーネント指向を学び、今年度のリポジトリに貢献する準備をします。</p>\n<p><img src=\"https://media.giphy.com/media/3o7abB06u9bNzA8lu8/giphy.gif?cid=ecf05e47bhbdz7hr6xgdcp5nzgdokl0gbzm3qw4o1g6qsx5p&#x26;rid=giphy.gif&#x26;ct=g\" alt=\"gif\"></p>","frontmatter":{"title":"Basic Node.js & Nuxt.js"}}},"pageContext":{"slug":"/4/"}},
    "staticQueryHashes": ["3649515864"]}