{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"nodes":[{"html":"","fields":{"slug":"/1/"},"frontmatter":{"title":"Introduction","id":1}},{"html":"<h2>分離</h2>\n<p>難しい問題を解決する手段の一つは、問題を分けて考えることです。</p>\n<p>デカルトが『方法序説』で「困難は分割せよ」と言っていますが、これはとても大切なことです。</p>\n<p>そして、難しい問題だけでなく、あらゆるプログラミングに普遍的に当てはまることであろうと思っています。</p>\n<p>例えば、「ユーザーがランダムに選ばれた選択肢に回答すると、データ分析して、ユーザーに最も相応しいアルバイトをおすすめする」というアプリでは、以下のような切り分け方ができます。</p>\n<ol>\n<li>ランダムに選択肢を生成し、ユーザーに表示する。</li>\n<li>ユーザーの回答をフロントからサーバーが受け取り、データ分析するアプリにそのデータを渡す。</li>\n<li>データ分析する。</li>\n<li>データ分析の結果をサーバーに渡す。</li>\n<li>サーバーは結果をフロントに渡す。</li>\n<li>結果をユーザーに表示する。</li>\n</ol>\n<p>切り分ける時に重要なことは、それぞれが独立するようにすることです。</p>\n<p>このように切り分けることで、フロントエンドエンジニア、サーバーサイドエンジニア、データサイエンティストは、それぞれのタスクに集中できます。</p>\n<p>すなわちデータサイエンティストは、2ではデータの受け取り方、3ではデータ分析、4ではデータの渡し方を考えるだけでよくなります。\nランダムな生成の仕方であったり、ユーザーへの表示の仕方、デザイン、サーバーからフロントへのデータの受け渡し方などを考慮する必要はなくなります。</p>\n<p>問題が発生した場合は、それぞれのステップで確認します。</p>\n<p>分離により、ある機能の中身とデータの受け渡し方さえ考えればよく、それ以外の機能の振る舞いについて考える必要がなくなります。</p>\n<h2>共通化</h2>\n<p>分離も重要ですが、他方で共通化も重要です。</p>\n<p>ある機能をする関数と似た機能をする関数は共通化することで、コーディングを減らしたり、バグを減らしたりできます。</p>\n<p>例えば、以下のようなボタンがある場合を考えてみます。</p>\n<p>ボタンA</p>\n<ul>\n<li>水色</li>\n<li>影がついている。</li>\n<li>角は丸くなってる。</li>\n<li>幅は120px。</li>\n<li>高さは40px。</li>\n</ul>\n<p>ボタンB</p>\n<ul>\n<li>赤色。</li>\n<li>影がついている。</li>\n<li>角は丸くなってる。</li>\n<li>幅は120px。</li>\n<li>高さは40px。</li>\n</ul>\n<p>この時共通化してこのようにできます。</p>\n<p>ボタン</p>\n<ul>\n<li>無色。</li>\n<li>影がついている。</li>\n<li>角は丸くなってる。</li>\n<li>幅は120px。</li>\n<li>高さは40px。</li>\n</ul>\n<p>ボタンA(ボタンを継承)</p>\n<ul>\n<li>水色。</li>\n</ul>\n<p>ボタンB(ボタンを継承)</p>\n<ul>\n<li>赤色。</li>\n</ul>\n<p>このようにして、ボタンをコンポーネント(部品)として扱えるようになります。</p>\n<p>可能な限り分離して、似ている部分を共通化することが肝要です。</p>\n<h2>質問</h2>\n<p>プログラミングをしていると質問したい事柄が出てくると思います。したがって質問の仕方についても確認しておきます。</p>\n<p>個人作業している時は、20分考えても分からなければ質問してください。</p>\n<p>:warning: チームで進めている時は、即座に聞いてください。</p>\n<p>質問する時は、使用しているOSも同時に教えてください。OSによって回答が異なる場合があるからです。</p>","fields":{"slug":"/2/"},"frontmatter":{"title":"Principles","id":2}},{"html":"<h1>Chapter3 Basic Git &#x26; GitHub</h1>\n<p>第三章では、GitとGitHubをインストールしながら、その基本を学習します。この章の最終ゴールは、早稲田祭2020のフロントエンドのコードをあなたのPCのVSCodeで閲覧できるようにすることです。</p>\n<p><img src=\"https://user-images.githubusercontent.com/65198192/132161190-bfee5b90-4868-424c-bdea-fa2bd0da3231.png\" alt=\"chapter3-hero\"></p>\n<h2>第一節 GitとGitHubとは</h2>\n<h3>1.Git</h3>\n<p>Gitとはバージョン管理システムの一つです。私たちが「Gitについて」という記事を書きたい場合は、下記のようなファイル名でバージョンを管理するでしょう。</p>\n<ul>\n<li>「『第1稿』Gitについて」</li>\n<li>「『第2稿』Gitについて」</li>\n<li>「『第3稿』Gitについて」</li>\n<li>「『第4稿』Gitについて」</li>\n</ul>\n<p>同様に、Gitはプログラムコードのバージョンを管理します。</p>\n<p>:warning:Gitではバージョン管理のためにファイル名やフォルダ名を変更する必要はありません。</p>\n<p>Gitは強力なバージョン管理システムです。100回変更した後に47回目のバージョンに完璧に戻すことができます。Gitはプログラマに様々なことを強制させますが、その恩恵は計り知れないです。</p>\n<h3>2.GitHub</h3>\n<p>Gitがローカルにあるバージョン管理システムであれば、GitHubはクラウドにあるバージョン管理システムです。イメージ的には、Driveの共有フォルダのようなものです。</p>\n<p>GitHubは、Gitとほぼ同じ機能をクラウド上で使えるようにするだけでなく、プロジェクト管理などの機能も提供してくれます。</p>\n<p>GitHubは素晴らしいツールですが、完璧ではありません。実際にプログラムを動作させることはGitHubでは基本的にはできず、ローカルでしかできません。</p>\n<h3>3.GitとGitHubのユースケース</h3>\n<p>ではどのようにGitとGitHubを使うのか説明しましょう。</p>\n<ol>\n<li>GitHubからリポジトリをローカルにclone（複製）する。\n<ol>\n<li>cloneとは、Driveにあるwordファイルをダウンロードするイメージです。</li>\n</ol>\n</li>\n<li>Branch（ブランチ）を切る。\n<ol>\n<li>branchを切るとは、「version2」のような大きいバージョンを準備するイメージです。</li>\n</ol>\n</li>\n<li>ファイルを編集する。</li>\n<li>ファイルをaddして、commit（コミット）する。\n<ol>\n<li>commitするとは、「version2」の「version1」のように小さいバージョンに更新するイメージです。</li>\n<li>addするとは、複数のファイルを編集した際に、どのファイルの編集を次のバージョンに組み込むかを選択する作業です。</li>\n</ol>\n</li>\n<li>3~4を繰り返す。</li>\n<li>pushする。\n<ol>\n<li>pushするとは、ブランチ（「version2」）をGitに送ることです。</li>\n</ol>\n</li>\n<li>GitHubでPullRequestする。\n<ol>\n<li>PullRequestとは、校閲を頼むイメージです。</li>\n</ol>\n</li>\n<li>GitHubでMerge（マージ）する\n<ol>\n<li>Mergeとは、「version2」を「version1」に組み込むイメージです。</li>\n</ol>\n</li>\n</ol>\n<h2>第二節 GitHubのアカウント作成</h2>\n<p><a href=\"https://qiita.com/ayatokura/items/9eabb7ae20752e6dc79d\">この記事</a>を読んで頑張ってください。</p>\n<p>:warning:クレジットカードの情報を聞かれた場合は、偽サイトを訪問してるか選択を誤っている場合があるので、連絡してください。</p>\n<h2>Gitのインストール</h2>\n<p>Progateが素晴らしい記事を用意してくれているので活用しましょう！\nやるのは「Gitの初期設定」までで、GitHubの部分はやらなくていいです。というかできません。</p>\n<ul>\n<li>Windows: <a href=\"https://prog-8.com/docs/git-env-win\">https://prog-8.com/docs/git-env-win</a></li>\n<li>Mac: <a href=\"https://prog-8.com/docs/git-env\">https://prog-8.com/docs/git-env</a></li>\n</ul>\n<p>:warning:素晴らしい記事と書きましたが、掲載情報が古いです。よく分からないことを聞かれた場合は、<a href=\"https://www.curict.com/item/60/60bfe0e.html\">この記事</a>から探して選択してください。</p>\n<h2>第三節 GitHubにSSH接続できるようにする</h2>\n<p>もう少しかみ砕いて表現すると、「<strong>自分のPCとGitHubでのデータのやり取りに公開鍵暗号方式を用いるようにする</strong>」ということです。</p>\n<h3>1.公開鍵暗号方式とは</h3>\n<h4>『公開鍵と秘密鍵』</h4>\n<p>公開鍵暗号方式を理解するために最も重要なことは、その効用を知ることです。</p>\n<p>効用について説明する前に、公開鍵暗号方式には二つの鍵が登場するので、それについて説明しておきます。</p>\n<p>:key:秘密鍵：自分だけが持つ鍵です。</p>\n<p>:key:公開鍵：インターネット上で公開できる鍵です。秘密鍵から生成されます。</p>\n<h4>『公開鍵暗号方式の効用とケース』</h4>\n<p><strong>:stars:「公開鍵で暗号化されたデータは秘密鍵でしか復号できない」</strong></p>\n<p>この効用を用いることで、事前に公開鍵を配布して、自分にデータを送信する時に公開鍵で暗号化してもらうことで、自分とデータの送信元でしかデータを見れないようにすることができます。</p>\n<p><strong>:stars:「秘密鍵で暗号化されたデータは、秘密鍵から生成された公開鍵によって、データが秘密鍵で暗号化されたか確認できる」</strong></p>\n<p>この効用を用いることで、あなたが送信したデータを受け取った相手は、あなたが送信したかを確認することができます。</p>\n<blockquote>\n<p>これを『電子署名』と呼びます。\n原理は以下のような流れです。（何となく理解できれば十分です。）</p>\n<ol>\n<li>データと秘密鍵で暗号化・圧縮して生成したデータ（署名）を送信します。</li>\n<li>受信者は、データと暗号化・圧縮されたデータをアルゴリズムに従って比較します。</li>\n<li>同じであることを確認できれば、送信者があなたであることを証明することになります。</li>\n</ol>\n</blockquote>\n<h4>『暗号の種類』</h4>\n<p>前項で暗号化という表現を用いたので、ここでは暗号について簡単に説明します。</p>\n<p>暗号の種類は多岐にわたりますが、原則は「暗号化は容易だが、復号するのは答えを知らなければ大変」です。</p>\n<p>代表的な暗号は、ブロックチェーンで有名なビットコインが用いているRSA暗号です。これは、「二つの素数を掛け合わせた数字を作るのは容易だが、掛け合わされた数学から二つの素数を見つけ出すのは大変」という素因数分解問題の困難さを用いた暗号です。</p>\n<p>具体的には、877×881は簡単に掛け合わせられるけど、772637を素因数分解するのは、答えを知らなければ大変でしょう。</p>\n<h3>2.GitHubにSSH接続する。</h3>\n<p>WindowsユーザーはWindowsボタンを押して、「Git Bash」と入力して開きます。Macユーザーはターミナルを使いましょう。</p>\n<blockquote>\n<p>ターミナルやGit BashはCUIツールと呼ばれ、コマンドを入力してPCを操作するツールです。\nWindowsには<code class=\"language-text\">Powershell</code>や<code class=\"language-text\">command prompt</code>と呼ばれるものもありますが、基本的に<code class=\"language-text\">Git Bash</code>を使ってください。</p>\n</blockquote>\n<blockquote>\n<p>コマンドの左端に<code class=\"language-text\">$</code>がありますが無視してください。システムが出力するコマンドと区別するために使っています。</p>\n</blockquote>\n<p>:one:まずはフォルダーの最上位階層（～）にいることを確認してください。デフォルトでは最上位層（～）にいると思います。\nもしいなければ、次のコマンドで最上位層（～）に移動します。（Chage Directory）</p>\n<p>:warning:先ほどもお伝えしましたが、コマンドの左端の<code class=\"language-text\">$</code>は無視してください。ここでは<code class=\"language-text\">cd ~</code>がコマンドとなります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> ~</code></pre></div>\n<p>:two:秘密鍵と公開鍵を保存するフォルダが存在するか確認するために次のコマンドを打ちます。（List Segments）</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> -al</code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">-a</code>は<code class=\"language-text\">.</code>付きのフォルダやファイルを表示するためのオプションです。\n<code class=\"language-text\">-l</code>は詳細なデータを表示するためのオプションです。</p>\n</blockquote>\n<p><code class=\"language-text\">.ssh/</code>が一覧の中に存在していれば、3は飛ばしてください。デフォルトでは存在しません。</p>\n<p>:three:秘密鍵と公開鍵を保存する<code class=\"language-text\">.ssh</code>フォルダを作る。（MaKe DIRectory）</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> .ssh</code></pre></div>\n<p>再度下のコマンドを実行して<code class=\"language-text\">.ssh</code>フォルダができたのか確認してください。ところでこのコマンドは2でも使いましたね。こういった時は、キーボードの:arrow_up:を押した分だけ、コマンドを再表示することができるので、ぜひ使ってみてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> -al</code></pre></div>\n<p>:four:<code class=\"language-text\">.ssh</code>フォルダに移動する。SSHキーはデフォルトでは<code class=\"language-text\">.ssh/</code>フォルダで生成されますが、念のため移動します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> .ssh</code></pre></div>\n<p>:five:SSHキーを生成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ssh-keygen -t rsa\nEnter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/Users/<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span>/.ssh/id_rsa<span class=\"token punctuation\">)</span>:\nEnter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>:\nEnter same passphrase again:</code></pre></div>\n<p>3回聞かれますがエンターして大丈夫です。</p>\n<p>もう少し詳しく説明すると、最初の質問は「<code class=\"language-text\">~/.ssh</code>フォルダにある<code class=\"language-text\">id_rsa</code>にキーを保存していい？」です。その通りなのでエンター。次の質問は、「SSHキーを使うときのパスワードを入力してください」です。パスワードはいらないのでエンター。次の質問もパスワード確認用なので、エンター。</p>\n<p>:warning:以前作成している場合は、「override?」みたいな質問が来ますのでご注意を。必要がなければ上書きしなくていいです。</p>\n<p>:six:<code class=\"language-text\">ls -al</code>で<code class=\"language-text\">id_rsa</code>が作成されたことを確認してください。次に公開鍵をコピーします。</p>\n<p>Mac</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pbcopy <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa.pub</code></pre></div>\n<p>Windows</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ clip <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa.pub</code></pre></div>\n<p>:seven:公開鍵をGitHubにアップロードします。</p>\n<ol>\n<li><a href=\"https://github.com/settings/ssh\">https://github.com/settings/ssh</a> を開きます。</li>\n<li>右上にある「Add SSH Key」と書かれた緑色のボタンをクリックします。</li>\n<li>Titleに公開鍵名を入力します。どのようなものでも構いませんが自分で識別できるようにしましょう。</li>\n<li>Keyにさきほどコピーした公開鍵をペーストしてください。</li>\n<li>最後に「Add Key」ボタンをクリックして登録してください。この時GitHubのパスワードを聞かれることがあります。</li>\n<li><a href=\"https://github.com/settings/ssh\">https://github.com/settings/ssh</a> を再度開いて、公開鍵が登録されていることを確認します。</li>\n</ol>\n<p>:seven:GitHubとの接続を確かめます。</p>\n<p>:warning:途中で<code class=\"language-text\">Are you sure you want to continue connecting (yes/no)?</code>と聞かれる場合がありますが、<code class=\"language-text\">yes</code>を入力してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -T git@github.com\nHi Akinori13<span class=\"token operator\">!</span> You've successfully authenticated, but GitHub does not provide shell access.</code></pre></div>\n<h2>第四節 早稲田祭2020のフロントエンドのコードをクローン</h2>\n<h3>1.クローン</h3>\n<ol>\n<li><a href=\"https://github.com/wasedasai/os2020-front\">https://github.com/wasedasai/os2020-front</a> にアクセスします。アクセスできない場合はログインできていないか、早稲田祭チームに追加されてない場合です。チームリーダーに連絡してください。</li>\n<li>「Code」と書かれた緑色のボタンをクリックします。</li>\n<li>HTTPSに赤線が引かれていると思いますが、その右にあるSSHをクリックしてください。</li>\n<li>その下にあるURLをコピーします。右にあるクリップボードのアイコンをクリックすればコピーできます。</li>\n<li><code class=\"language-text\">cd ~</code>で最上位層に移動します。</li>\n<li><code class=\"language-text\">git clone &lt;URL></code>を実行します。<code class=\"language-text\">&lt;URL></code>は削除して、先ほどコピーしたものをペーストしてください。</li>\n<li>実行すると100%って表示されると思います。途中でUsernameとかPasswordを聞かれた場合は、チームに連絡を！</li>\n</ol>\n<h3>2.去年のソースコードを閲覧してみよう！</h3>\n<ol>\n<li>VSCodeを開きます</li>\n<li>左上のファイル→フォルダーを開くをクリック！</li>\n<li><code class=\"language-text\">os2020-front</code>をクリックして、フォルダーの選択をします。</li>\n<li>src/pages/index.vueには2020年のフロントエンドのソースコードが書いてあります。</li>\n</ol>\n<h2>お疲れ様！！</h2>\n<p>次回は去年のソースコードを実際にブラウザで見れるようにします。</p>\n<p><img src=\"https://media.giphy.com/media/3o7abB06u9bNzA8lu8/giphy.gif?cid=ecf05e47bhbdz7hr6xgdcp5nzgdokl0gbzm3qw4o1g6qsx5p&#x26;rid=giphy.gif&#x26;ct=g\" alt=\"gif\"></p>\n<h2>追記</h2>\n<p>注意点をいくつか書いておきます。</p>\n<ul>\n<li>どうしてもうまくいかない場合は、再起動したりGitを再インストールすることをお勧めします。</li>\n<li>公開鍵認証のキーはとても長いので安全性が担保されており、UsernameとPasswordによる認証は短いので安全性が低いです。公開鍵認証の他に個人用アクセストークンというPasswordをとっても長くしたものを利用することもできます。SSHが難しそうであれば、それも一案です。</li>\n<li><code class=\"language-text\">ssh-keygen -t rsa</code>は、本来は<code class=\"language-text\">ssh-keygen -t ed25519 -C \"your_email@example.com\"</code>や<code class=\"language-text\">ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"</code>を実行することを推奨されています。</li>\n<li><code class=\"language-text\">ssh-keygen -t rsa</code>でパスワードを入力しませんでしたが、本来は入力すべきです。</li>\n<li><code class=\"language-text\">ssh -T git@github.com</code>を実行したときに表示される<code class=\"language-text\">fingerprint</code>は、<a href=\"https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints\">ここ</a>と同一であるかを本来は確認すべきです。</li>\n</ul>","fields":{"slug":"/3/"},"frontmatter":{"title":"Basic Git & GitHub","id":3}},{"html":"<h1>Chapter5 Components &#x26; Team</h1>\n<p>第五章では、基本的なチーム開発の流れを習得しながら、コンポーネント指向について学びます。この章の最終ゴールは、あなたが担当するページを作成し、今年度のフロントエンドのレポジトリに貢献することです。</p>\n<p><img src=\"https://user-images.githubusercontent.com/65198192/132814224-2319bebf-9103-4233-a55c-29cfa545cbcb.png\" alt=\"chapter5\"></p>\n<h2>第一節 コンポーネント指向</h2>\n<h3>:dizzy:コンポーネント指向とは</h3>\n<p>まずはコンポーネント指向について学びます。コンポーネントとは部品のことです。</p>\n<p>例えばフッターはサイトの大半のページにおいて共通です。そこでフッターを部品としてあらかじめ定義しておきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"># app<span class=\"token operator\">/</span>components<span class=\"token operator\">/</span>Footer<span class=\"token punctuation\">.</span>js\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Footer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>footer<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"footer-inner\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>早稲田祭<span class=\"token number\">2021</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ul <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"footerNav\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Page1<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Page2<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Page3<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Page4<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>footer<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Footer</code>コンポーネントを<code class=\"language-text\">import</code>して使います！</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"># app<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js\n\n<span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/Footer\"</span> <span class=\"token keyword\">import</span> Footer\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">app</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>header<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"footer-inner\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>早稲田祭<span class=\"token number\">2021</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>ul <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"footerNav\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Page1<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Page2<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Page3<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Page4<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>header<span class=\"token operator\">></span>\n    \n    <span class=\"token operator\">&lt;</span>main<span class=\"token operator\">></span>Hello World<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>main<span class=\"token operator\">></span>\n    \n    <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">&lt;header>~&lt;/header></code>と<code class=\"language-text\">&lt;Footer /></code>を見比べてください。コンポーネントならとっても簡単に使いまわせると思いませんか？</p>\n<p>:warning:いつもVSCodeの補完機能に頼ってるので、この書き方で正しかったか不安です。あくまでもコンポーネント理解のためなので、コーディング時に参考にしないでください。（追記：これはReactでの書き方で、Vueと全然違いました。比較を下の方でしています。）</p>\n<h3>:dizzy:アトミックデザイン</h3>\n<p>部品化していくとコンポーネントを定義するファイルをcomponentsフォルダに大量に作成することになります。そのような場合、<code class=\"language-text\">Link</code>コンポーネントと<code class=\"language-text\">Header</code>コンポーネントを定義するファイルが同居することになります。</p>\n<p>しかし、これはあまり可読性が良い状態ではないのでもう少し整理したいですね。そこでアトミックデザインという考えが導入されました。</p>\n<p>アトミックデザインの概念では、コンポーネントを以下の５種類に分けています。</p>\n<ul>\n<li>Atoms</li>\n<li>Molecules</li>\n<li>Organisms</li>\n<li>Templates</li>\n<li>Pages</li>\n</ul>\n<p>それぞれはこんな感じです。（出典： <a href=\"https://atomicdesign.bradfrost.com/chapter-2/\">https://atomicdesign.bradfrost.com/chapter-2/</a> ）\n<img src=\"https://user-images.githubusercontent.com/65198192/132858440-4bb6979e-bb3e-4658-878b-e5a08bf3dbed.png\" alt=\"chapter5-components\"></p>\n<p>ちょっとまだ分かりづらいので、マンションをサイトとして説明しようと思います。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">用語</th>\n<th align=\"left\">具体的なコンポーネント</th>\n<th align=\"left\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Pages</td>\n<td align=\"left\">EventsSearchPage</td>\n<td align=\"left\">部屋です。</td>\n</tr>\n<tr>\n<td align=\"left\">Templates</td>\n<td align=\"left\">DefaultLayout</td>\n<td align=\"left\">間取りです。最上階は少し部屋の面積が広かったりします。</td>\n</tr>\n<tr>\n<td align=\"left\">Organisms</td>\n<td align=\"left\">Header</td>\n<td align=\"left\">ドアやシャワールームです。</td>\n</tr>\n<tr>\n<td align=\"left\">Molecules</td>\n<td align=\"left\">Navigation</td>\n<td align=\"left\">ドアノブやシャワーヘッドです。</td>\n</tr>\n<tr>\n<td align=\"left\">Atoms</td>\n<td align=\"left\">Button</td>\n<td align=\"left\">ネジや布でしょうか。</td>\n</tr>\n</tbody>\n</table>\n<p>アトミックデザインの雰囲気を感じ取ってもらったところで、Nuxtのフォルダー構成を確認します。<code class=\"language-text\">Templates</code>が<code class=\"language-text\">layouts</code>に変化していることに注意です！</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> components/\n ├── atoms\n │   ├── Link\n │   │   ├── NormalLink.vue\n │   │   └── BoldLink.vue\n │   ├── Button\n │   │   ├── NormalButton.vue\n │   │   └── BoldButton.js\n │   └── Table\n │       ├── HeaderCell.vue\n │       └── ContentCell.vue\n ├── molecules\n │   ├── Article\n │   │   ├── MainArticle.vue\n │   │   └── SubArticle.vue\n │   └── Table\n │       ├── TableHeader.vue\n │       └── TableContent.vue\n ├── organisms\n │   ├── Header\n │   │   ├── MainHeader.vue\n │   │   └── SubHeader.vue\n │   └── Table\n │       ├── MainTable.vue\n │       └── SubTable.vue\n layouts/\n ├── error.vue\n ├── default.vue\n ├── top.vue\n pages/\n ├── search\n │   └── index.vue <span class=\"token comment\"># 企画検索ページ。`/search`でアクセスできます。</span>\n ├── events\n │   └── _id.vue <span class=\"token comment\"># 企画詳細ページ。`/events/10`などでアクセス可能。`_`を使えばurlに含まれる情報をページに渡せます。</span>\n ├── index.vue <span class=\"token comment\"># トップページはこれです。</span></code></pre></div>\n<h3>:dizzy:コンポーネントとJavaScriptの関係性</h3>\n<p>冒頭でコンポーネント指向の説明をした時に、<code class=\"language-text\">const Footer = () => {</code>みたいなコードを見たと思います。</p>\n<p>これはJavaScriptのコードです。実はコンポーネントを作るにはJavaScirptが必要です。難しく思えるかもしれませんが、コンポーネントを使うのに必要なJavaScirptの知識はそれほど難しくはありません。</p>\n<h3>:dizzy:ReactとVue</h3>\n<p>同じコンポーネント指向でもReactとVueは書き方は全く異なります。</p>\n<h3>:stars:React</h3>\n<div class=\"gatsby-highlight\" data-language=\"react.js\"><pre class=\"language-react.js\"><code class=\"language-react.js\"># app/components/Footer.js\n\nexport const Footer = () =&gt; {\n  return (\n    &lt;footer&gt;\n      &lt;div class=&quot;footer-inner&quot;&gt;\n        &lt;h2&gt;早稲田祭2021&lt;/h2&gt;\n        &lt;ul class=&quot;footerNav&quot;&gt;\n          &lt;li&gt;Page1&lt;/li&gt;\n          &lt;li&gt;Page2&lt;/li&gt;\n          &lt;li&gt;Page3&lt;/li&gt;\n          &lt;li&gt;Page4&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/div&gt;\n    &lt;/footer&gt;\n  );\n}</code></pre></div>\n<h3>:stars:Vue</h3>\n<p>VueではほとんどJavaScriptを意識する必要はありません。</p>\n<div class=\"gatsby-highlight\" data-language=\"vue.js\"><pre class=\"language-vue.js\"><code class=\"language-vue.js\"># app/components/Footer.js\n&lt;template&gt;\n  &lt;footer&gt;\n      &lt;div class=&quot;footer-inner&quot;&gt;\n        &lt;h2&gt;早稲田祭2021&lt;/h2&gt;\n        &lt;ul class=&quot;footerNav&quot;&gt;\n          &lt;li&gt;Page1&lt;/li&gt;\n          &lt;li&gt;Page2&lt;/li&gt;\n          &lt;li&gt;Page3&lt;/li&gt;\n          &lt;li&gt;Page4&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/div&gt;\n    &lt;/footer&gt;\n&lt;/template&gt;\n\n&lt;style&gt;\nfooter {\n  padding: 16px;\n}\n&lt;/style&gt;</code></pre></div>\n<h2>第二節 チーム開発</h2>\n<p>第三章で基本的な流れを再度確認しておいてください。</p>\n<p>:one: リポジトリのクローン</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone <span class=\"token operator\">&lt;</span>URL<span class=\"token operator\">></span></code></pre></div>\n<p>:two: VSCodeでターミナルを開いて現在いるブランチを確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> branch\n<span class=\"token comment\"># developと表示されればOKです。</span></code></pre></div>\n<p>:three: ブランチを作成します。その次にGitHubにブランチを登録します。</p>\n<p>:warning: <code class=\"language-text\">&lt;BranchName></code>は、<code class=\"language-text\">akinori/create-header-component</code>、<code class=\"language-text\">akinori/create-top-page</code>や<code class=\"language-text\">akinori/add-logo-to-header-component</code>のように、自分の名前を入れた何をしようとしているのかパット見て分かるようなブランチ名にしてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> checkout -b <span class=\"token operator\">&lt;</span>BranchName<span class=\"token operator\">></span>\n$ <span class=\"token function\">git</span> branch\n<span class=\"token comment\"># &lt;BranchName>が表示されればOKです。</span>\n$ <span class=\"token function\">git</span> push -u origin <span class=\"token operator\">&lt;</span>BranchName<span class=\"token operator\">></span></code></pre></div>\n<p>:four: ある程度進むごとにコミットします。拡張機能のソース管理を開いて一つ一つプラスボタンを押下していきます。コミットするファイルを選択し終えたら、以下のコマンドを実行します。ダブルクオーテーションマークの中身は自分が何をしたのかをメッセージとして書いてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"Headerの骨格を作成しました。\"</span></code></pre></div>\n<p>:five: 作業が完了したら以下のコマンドを実行してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> push</code></pre></div>\n<p>:six: 次にPullRequestをします。リポジトリのPull requestsタブをクリックします。そして右にある緑色の「New pull request」を押下してください。</p>\n<p>その後、自分がどのようなことをしたのかやレビュー担当者への連絡事項などを記載してPullRequestを作成してください。</p>\n<p>:warning: <code class=\"language-text\">base: develop &lt;- compare: &lt;BranchName></code>になっていることを確認してください。</p>\n<p>:seven: 終わったらレビュー担当者に連絡してください。レビュー担当者は、必要な項目をすべてクリアしていると確認した段階で、マージします。</p>\n<h2>お疲れ様！！</h2>\n<p>今年度のWebサイト作成頑張りましょう！</p>\n<p><img src=\"https://media.giphy.com/media/3o7abB06u9bNzA8lu8/giphy.gif?cid=ecf05e47bhbdz7hr6xgdcp5nzgdokl0gbzm3qw4o1g6qsx5p&#x26;rid=giphy.gif&#x26;ct=g\" alt=\"gif\"></p>","fields":{"slug":"/5/"},"frontmatter":{"title":"Components & Team","id":5}},{"html":"<h1>Chapter4 Basic Node.js &#x26; Nuxt.js</h1>\n<p>第四章では、Node.jsをインストールしながら、Nuxtを概観します。この章の最終ゴールは、早稲田祭2020のフロントエンドをあなたのブラウザで閲覧できるようにして、コードで遊べるようにすることです。</p>\n<p><img src=\"https://user-images.githubusercontent.com/65198192/132185160-53a1165c-62f2-4c5b-ab05-0ba85fe39dbc.png\" alt=\"chapter4\"></p>\n<h2>第一節 Nuxt（ナクスト）とVue（ビュー）</h2>\n<p>早稲田祭のサイトのフロントエンドは、Nuxtで作ります。</p>\n<p>NuxtとはJavaScriptのライブラリであるVueのフレームワークのことです。ライブラリとフレームワークについて解説します。</p>\n<ul>\n<li>ライブラリを用いることで、特定の文脈で特定の書き方に従えば、ある機能を言語本来の書き方よりも遙かに少ないコーディングで実現できます。</li>\n<li>フレームワークを用いることで、特定のルールをチームに強制し、開発での統一性を保ちます。同時に一定の処理をフレームワーク側で実行することで、私たちの負担を減らします。</li>\n</ul>\n<p>代表的なJavaScriptのライブラリを紹介します。</p>\n<ul>\n<li>jQuery：アニメーションにおいて強力なライブラリで、複雑な動作を実現できます。コーディング時に参考になるサイトが豊富です。</li>\n<li>React：コンポーネント指向に基づく最も有力なライブラリの一つです。HTMLとCSSを部品化するコンポーネント指向を導入することで、チーム開発において驚異的なパフォーマンスをしてくれます。一方で高いコーディングスキルが求められるので、習得が簡単ではありません。</li>\n<li>Vue：このライブラリの哲学は、「Reactよりも簡単に使える」です。コンポーネント指向を導入し、チーム開発に素晴らしい活躍をます。同時に、簡単に導入出来て、簡単に使うことができます。</li>\n</ul>\n<p>フレームワークはライブラリ次第で決まります。一般的には以下の組み合わせで使います。なおjQueryに代表的なフレームワークはありません。</p>\n<ul>\n<li>React × Next</li>\n<li>Vue × Nuxt</li>\n</ul>\n<p>:warning:フレームワークを必ずしも使わなければならない理由はありません。中規模以上のサイトにはフレームワークを利用した方がいいという印象です。</p>\n<p>:warning:フレームワークは一つしか使えませんが、ライブラリは複数導入できます。例えばjQueryをReactやVueに導入することもできます。一方でReactとVueを同時に使うことはありえません。違う面で素晴らしい能力を発揮するライブラリを組み合わせて使います。</p>\n<h2>第二節 必要性</h2>\n<p>NuxtとVueが必要になる理由を知ることで、Webに関する知識をもう少し深めます。</p>\n<p>早稲田祭のサイトは、企画詳細ページを含めて300ページ以上にも及びます。HTMLとCSSだけで制作するには人員も時間も足りません。</p>\n<p>300ページ以上にも及ぶ早稲田祭のサイトですが、大半を占める企画詳細ページは、一つの型にデータベースから得た掲載情報を流し込むことで表示することができます。</p>\n<p>それを実現するためにVueを使います。チーム開発になるのでNuxtを使ってコードやフォルダ管理で統一性を保ちます。これがNuxtとVueが必要になる理由です。</p>\n<blockquote>\n<p>企画詳細ページだけにVueを導入する案を考慮しました。\n残念ながらこの案は採用できません。企画詳細ページをシェアできないという最大の欠点を抱えるからです。</p>\n</blockquote>\n<h2>第三節 Node.jsとは</h2>\n<p>Node.jsについては、<a href=\"https://qiita.com/non_cal/items/a8fee0b7ad96e67713eb\">Node.jsとはなにか？なぜみんな使っているのか？</a>を読んでください。</p>\n<p>これを読んでから次の章に進んでください。</p>\n<h2>第四節 Node.jsインストール</h2>\n<p>MacとWindowsでインストール方法が異なります。いずれの方法でもNode.jsのバージョンを管理するためのツールを使います。</p>\n<p>インストールするNode.jsのバージョンは、<a href=\"https://nodejs.org/en/\">Node.jsの公式サイト</a>でLTSと表示されているバージョンを使うのが良いです。チームで共通のバージョンを使うことに注意してください。</p>\n<p>説明時に「パスを通す」という表現があります。これは、インストールしたものをどこからでも使えるようにシステムに登録することです。パスが通ってない場合、「~というコマンドが見つかりません」などのエラーが表示されます。</p>\n<h3>:dizzy:MacOS</h3>\n<p>MacOSでnode.jsをインストールする方法は二つあります。</p>\n<h4>:sparkles:NodebrewでNode.jsをインストールする</h4>\n<p>MacではNode.jsのバージョンを管理するためにHomebrewとnodebrewを使います。</p>\n<p>:one: ターミナルに貼り付けてエンター、<code class=\"language-text\">PRESS RETURN ~~</code>が出てきたらエンター押します。Installが始まるので待ちます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ /bin/bash -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class=\"token variable\">)</span></span>\"</span></code></pre></div>\n<p>:two: nodebrewをインストールして何らかのバージョンが表示されることを確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> nodebrew\n$ nodebrew -v</code></pre></div>\n<p>:three: nodebrewのパスを通す準備にします。</p>\n<ul>\n<li>bashを使っている場合</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> ~/.bash_profile</code></pre></div>\n<ul>\n<li>zshを使っている場合</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> ~/.zshrc</code></pre></div>\n<p>viが開けたら、<code class=\"language-text\">i</code>キーを押下しviのインサートモード（編集モード）に入ります。以下の文字列をコピペします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export PATH=$HOME/.nodebrew/current/bin:$PATH</code></pre></div>\n<p><code class=\"language-text\">ESC</code>キー押下してノーマルモードに戻ります。次に<code class=\"language-text\">:wq</code>を順に押して保存します。</p>\n<p>:four: nodebrewのパスを通します</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">source</span> ~/.bash_profile\n$ nodebrew setup</code></pre></div>\n<p>:five: バージョンを指定してNode.jsをインストールします。最後のコマンドで指定のバージョンが表示されれば成功です。</p>\n<p>:warning:<code class=\"language-text\">&lt;Version></code>にチーム指定のバージョンを入力してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nodebrew install-binary v<span class=\"token operator\">&lt;</span>Version<span class=\"token operator\">></span>\n$ nodebrew use v<span class=\"token operator\">&lt;</span>Version<span class=\"token operator\">></span>\n$ node -v</code></pre></div>\n<h4>:sparkles:NodenvでNode.jsをインストールする</h4>\n<p>:one: nodenvをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone git://github.com/nodenv/nodenv.git ~/.nodenv</code></pre></div>\n<p>:two: nodenvの動作を高速化するコマンドを打ちます。失敗しても問題ありません。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> ~/.nodenv <span class=\"token operator\">&amp;&amp;</span> src/configure <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> -C src</code></pre></div>\n<p>:three: ターミナルのタイプを確認します。Macのターミナルは、<code class=\"language-text\">Bash</code>か<code class=\"language-text\">Zsh</code>を使っているので、どちらを使っているか確認します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$ZSH_VERSION</span>\n数字が表示された場合zshを使用しています\n\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$BASH_VERSION</span>\n数字が表示された場合bashを使用しています</code></pre></div>\n<p>:four: nodenvにパスを通します。<code class=\"language-text\">Zsh</code>を使っている場合は、<code class=\"language-text\">.bash_profile</code>を<code class=\"language-text\">.zshrc</code>に変更してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'export PATH=\"$HOME/.nodenv/bin:$PATH\"'</span> <span class=\"token operator\">>></span> ~/.bash_profile</code></pre></div>\n<p>:five: nodenvをセットアップします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ~/.nodenv/bin/nodenv init</code></pre></div>\n<p>:six: パスの更新をターミナルに適用するため、一旦ターミナルを閉じて、再度開きます。次に下のコマンドを実行して、バージョンが表示されることを確認してください。表示されない場合はチームに報告！</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nodenv -v</code></pre></div>\n<p>:seven: nodenvの拡張パッケージであるnode-buildをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> -p <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>nodenv root<span class=\"token variable\">)</span></span>\"</span>/plugins\n$ <span class=\"token function\">git</span> clone https://github.com/nodenv/node-build.git <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>nodenv root<span class=\"token variable\">)</span></span>\"</span>/plugins/node-build</code></pre></div>\n<p>:eight: Node.jsをインストールし、どの階層でも使えるようにグローバルに設定します。</p>\n<p>:warning:<code class=\"language-text\">&lt;Version></code>にチーム指定のバージョンを入力してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nodenv <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>Version<span class=\"token operator\">></span>\n$ nodenv global <span class=\"token operator\">&lt;</span>Version<span class=\"token operator\">></span></code></pre></div>\n<h3>:dizzy:Windows</h3>\n<p>WindowsではNode.jsのバージョンを管理するためにnodistを使います。</p>\n<p><a href=\"https://qiita.com/satoyan419/items/56e0b5f35912b9374305\">nodistでNode.jsをバージョン管理</a>を読んで頑張ってください。この記事の「Node.jsのインストール」まで完了してください。</p>\n<p>:warning:Node.jsはチーム指定のバージョンを入力してください。それ以外は最新バージョンで問題ありません。</p>\n<p>:warning:CUIはGit Bashを使ってください。<code class=\"language-text\">Windows</code>キーを押下して、<code class=\"language-text\">Git Bash</code>と入力してエンターすればGit Bashが開かれます・</p>\n<h2>第五節 os2020-frotをブラウザで見よう</h2>\n<p>:one: ターミナル/Git Bashを開いて、<code class=\"language-text\">npm</code>のバージョンを確認します。表示されることが重要で、チームで完全に同じである必要はないです。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> -v</code></pre></div>\n<p>:two: Yarnをnpmでインストールし、バージョンを確認、初期設定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g <span class=\"token function\">yarn</span>\n$ <span class=\"token function\">yarn</span> -v</code></pre></div>\n<p>:three: 第四章でインストールした<code class=\"language-text\">os2020-front</code>のインストールされた階層に<code class=\"language-text\">cd</code>コマンドを使って移動して、次のコマンドを実行します。（もしくはVSCodeで<code class=\"language-text\">os2020-front</code>を開いて、<code class=\"language-text\">Ctrl</code>を押しながら<code class=\"language-text\">@</code>キーを押下するとターミナルが使えます。Git Bashに変更して次のコマンドを実行します。変更方法はネットで探してください。）</p>\n<p>パッケージをたくさんインストールするので時間がかかります。待ちましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">install</span></code></pre></div>\n<p>:four: コマンドが打てる状況になったら、次のコマンドを実行します。これもまた時間がかかります。しばらくしたら<code class=\"language-text\">http://localhost:2020</code>をブラウザで開いてください。</p>\n<p>:warning:「途中で開発に協力しますか」的な質問がありますが、<code class=\"language-text\">n</code>と答えてエンターしてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ yarn dev</code></pre></div>\n<h2>お疲れ様！！</h2>\n<p>2020年度のサイトが表示されたら完了です！\nこれで環境構築も終わりです。次回はチーム開発の基本と流れ、コンポーネント指向を学び、今年度のリポジトリに貢献する準備をします。</p>\n<p><img src=\"https://media.giphy.com/media/3o7abB06u9bNzA8lu8/giphy.gif?cid=ecf05e47bhbdz7hr6xgdcp5nzgdokl0gbzm3qw4o1g6qsx5p&#x26;rid=giphy.gif&#x26;ct=g\" alt=\"gif\"></p>","fields":{"slug":"/4/"},"frontmatter":{"title":"Basic Node.js & Nuxt.js","id":4}},{"html":"<h1>Infra</h1>\n<p>この章では、インフラ、サーバーの負荷と基本的なサーバーの取り扱いについて学びます。</p>\n<p><img src=\"https://user-images.githubusercontent.com/65198192/143469543-83c96ba4-103f-44d5-bbda-ca5a64b8a948.png\" alt=\"devsServer-hero\"></p>\n<h2>第一節 インフラ</h2>\n<h3>インフラとは</h3>\n<p>インフラは水道・電気・ガスなどの私たちの生活を支える基盤ですが、IT分野（特にWEB）では、インフラはサーバー、データベース、OSやネットワーク構成などのサービスを支える技術群のことを指します。</p>\n<p>以下ではWEBサービスを支えるインフラを紹介します。</p>\n<h4>:dizzy: サーバー</h4>\n<p>あるサービスを提供するものをサーバーと言います。（例えば水を提供するウォーターサーバー）</p>\n<p>いわゆるIT分野におけるサーバーは、一般的なPCでも代用可能です。しかし、私たちのPCは大量のユーザーをさばけるほど高性能ではありませんし、壊れてしまえば修復するのに何週間もかかる可能性もあります。そこで専用のコンピュータを用意するのが通常です。</p>\n<p>:warning:ややこしいことにサーバーとは、サーバールームにある巨大装置のことを指すだけではありません。WEBサイトやWEBアプリを提供するWEBサーバー、データベースサーバー、メールサーバー、ファイルサーバーなどがあります。</p>","fields":{"slug":"/6/"},"frontmatter":{"title":"Basic Infra","id":6}},{"html":"<h1>引き継ぎ</h1>\n<h2>MEMO</h2>\n<p>とりあえず、箇条書きでひたすら書く</p>\n<ul>\n<li>仮サイトは例年のテンプレを使う。（ある程度）</li>\n<li>Vue使うならjQueryは使わない方がいい</li>\n<li>仮想DOMとリアルDOM。無限スクロール</li>\n<li>サーバー担当最低3人</li>\n<li>当日ほぼシフトなしを上記から2人が常駐</li>\n<li>10個以上のデータはスプシで共有</li>\n<li>文字数の制限</li>\n<li></li>\n</ul>\n<h2>各コンテンツ概要</h2>\n<ul>\n<li>サイト説明</li>\n<li>注意事項</li>\n<li>分析</li>\n<li>スケジュール</li>\n<li>当日</li>\n<li>採用技術</li>\n<li>フロントエンド</li>\n<li>バックエンド</li>\n</ul>\n<h2>コンテンツ</h2>\n<h3>完成サイト</h3>\n<h3>注意事項</h3>\n<h3>スケジュール</h3>\n<h3>当日</h3>\n<h3>採用技術</h3>\n<h3>フロントエンド</h3>\n<h3>バックエンド</h3>","fields":{"slug":"/report/"},"frontmatter":{"title":"Report","id":7}}]}},"pageContext":{}},
    "staticQueryHashes": ["3649515864"]}