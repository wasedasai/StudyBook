{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/3/",
    "result": {"data":{"markdownRemark":{"html":"<h1>Chapter3 Basic Git &#x26; GitHub</h1>\n<p>第三章では、GitとGitHubをインストールしながら、その基本を学習します。この章の最終ゴールは、早稲田祭2020のフロントエンドのコードをあなたのPCのVSCodeで閲覧できるようにすることです。</p>\n<p><img src=\"https://user-images.githubusercontent.com/65198192/132161190-bfee5b90-4868-424c-bdea-fa2bd0da3231.png\" alt=\"chapter3-hero\"></p>\n<h2>第一節 GitとGitHubとは</h2>\n<h3>1.Git</h3>\n<p>Gitとはバージョン管理システムの一つです。私たちが「Gitについて」という記事を書きたい場合は、下記のようなファイル名でバージョンを管理するでしょう。</p>\n<ul>\n<li>「『第1稿』Gitについて」</li>\n<li>「『第2稿』Gitについて」</li>\n<li>「『第3稿』Gitについて」</li>\n<li>「『第4稿』Gitについて」</li>\n</ul>\n<p>同様に、Gitはプログラムコードのバージョンを管理します。</p>\n<p>:warning:Gitではバージョン管理のためにファイル名やフォルダ名を変更する必要はありません。</p>\n<p>Gitは強力なバージョン管理システムです。100回変更した後に47回目のバージョンに完璧に戻すことができます。Gitはプログラマに様々なことを強制させますが、その恩恵は計り知れないです。</p>\n<h3>2.GitHub</h3>\n<p>Gitがローカルにあるバージョン管理システムであれば、GitHubはクラウドにあるバージョン管理システムです。イメージ的には、Driveの共有フォルダのようなものです。</p>\n<p>GitHubは、Gitとほぼ同じ機能をクラウド上で使えるようにするだけでなく、プロジェクト管理などの機能も提供してくれます。</p>\n<p>GitHubは素晴らしいツールですが、完璧ではありません。実際にプログラムを動作させることはGitHubでは基本的にはできず、ローカルでしかできません。</p>\n<h3>3.GitとGitHubのユースケース</h3>\n<p>ではどのようにGitとGitHubを使うのか説明しましょう。</p>\n<ol>\n<li>GitHubからリポジトリをローカルにclone（複製）する。\n<ol>\n<li>cloneとは、Driveにあるwordファイルをダウンロードするイメージです。</li>\n</ol>\n</li>\n<li>Branch（ブランチ）を切る。\n<ol>\n<li>branchを切るとは、「version2」のような大きいバージョンを準備するイメージです。</li>\n</ol>\n</li>\n<li>ファイルを編集する。</li>\n<li>ファイルをaddして、commit（コミット）する。\n<ol>\n<li>commitするとは、「version2」の「version1」のように小さいバージョンに更新するイメージです。</li>\n<li>addするとは、複数のファイルを編集した際に、どのファイルの編集を次のバージョンに組み込むかを選択する作業です。</li>\n</ol>\n</li>\n<li>3~4を繰り返す。</li>\n<li>pushする。\n<ol>\n<li>pushするとは、ブランチ（「version2」）をGitに送ることです。</li>\n</ol>\n</li>\n<li>GitHubでPullRequestする。\n<ol>\n<li>PullRequestとは、校閲を頼むイメージです。</li>\n</ol>\n</li>\n<li>GitHubでMerge（マージ）する\n<ol>\n<li>Mergeとは、「version2」を「version1」に組み込むイメージです。</li>\n</ol>\n</li>\n</ol>\n<h2>第二節 GitHubのアカウント作成</h2>\n<p><a href=\"https://qiita.com/ayatokura/items/9eabb7ae20752e6dc79d\">この記事</a>を読んで頑張ってください。</p>\n<p>:warning:クレジットカードの情報を聞かれた場合は、偽サイトを訪問してるか選択を誤っている場合があるので、連絡してください。</p>\n<h2>Gitのインストール</h2>\n<p>Progateが素晴らしい記事を用意してくれているので活用しましょう！\nやるのは「Gitの初期設定」までで、GitHubの部分はやらなくていいです。というかできません。</p>\n<ul>\n<li>Windows: <a href=\"https://prog-8.com/docs/git-env-win\">https://prog-8.com/docs/git-env-win</a></li>\n<li>Mac: <a href=\"https://prog-8.com/docs/git-env\">https://prog-8.com/docs/git-env</a></li>\n</ul>\n<p>:warning:素晴らしい記事と書きましたが、掲載情報が古いです。よく分からないことを聞かれた場合は、<a href=\"https://www.curict.com/item/60/60bfe0e.html\">この記事</a>から探して選択してください。</p>\n<h2>第三節 GitHubにSSH接続できるようにする</h2>\n<p>もう少しかみ砕いて表現すると、「<strong>自分のPCとGitHubでのデータのやり取りに公開鍵暗号方式を用いるようにする</strong>」ということです。</p>\n<h3>1.公開鍵暗号方式とは</h3>\n<h4>『公開鍵と秘密鍵』</h4>\n<p>公開鍵暗号方式を理解するために最も重要なことは、その効用を知ることです。</p>\n<p>効用について説明する前に、公開鍵暗号方式には二つの鍵が登場するので、それについて説明しておきます。</p>\n<p>:key:秘密鍵：自分だけが持つ鍵です。</p>\n<p>:key:公開鍵：インターネット上で公開できる鍵です。秘密鍵から生成されます。</p>\n<h4>『公開鍵暗号方式の効用とケース』</h4>\n<p><strong>:stars:「公開鍵で暗号化されたデータは秘密鍵でしか復号できない」</strong></p>\n<p>この効用を用いることで、事前に公開鍵を配布して、自分にデータを送信する時に公開鍵で暗号化してもらうことで、自分とデータの送信元でしかデータを見れないようにすることができます。</p>\n<p><strong>:stars:「秘密鍵で暗号化されたデータは、秘密鍵から生成された公開鍵によって、データが秘密鍵で暗号化されたか確認できる」</strong></p>\n<p>この効用を用いることで、あなたが送信したデータを受け取った相手は、あなたが送信したかを確認することができます。</p>\n<blockquote>\n<p>これを『電子署名』と呼びます。\n原理は以下のような流れです。（何となく理解できれば十分です。）</p>\n<ol>\n<li>データと秘密鍵で暗号化・圧縮して生成したデータ（署名）を送信します。</li>\n<li>受信者は、データと暗号化・圧縮されたデータをアルゴリズムに従って比較します。</li>\n<li>同じであることを確認できれば、送信者があなたであることを証明することになります。</li>\n</ol>\n</blockquote>\n<h4>『暗号の種類』</h4>\n<p>前項で暗号化という表現を用いたので、ここでは暗号について簡単に説明します。</p>\n<p>暗号の種類は多岐にわたりますが、原則は「暗号化は容易だが、復号するのは答えを知らなければ大変」です。</p>\n<p>代表的な暗号は、ブロックチェーンで有名なビットコインが用いているRSA暗号です。これは、「二つの素数を掛け合わせた数字を作るのは容易だが、掛け合わされた数学から二つの素数を見つけ出すのは大変」という素因数分解問題の困難さを用いた暗号です。</p>\n<p>具体的には、877×881は簡単に掛け合わせられるけど、772637を素因数分解するのは、答えを知らなければ大変でしょう。</p>\n<h3>2.GitHubにSSH接続する。</h3>\n<p>WindowsユーザーはWindowsボタンを押して、「Git Bash」と入力して開きます。Macユーザーはターミナルを使いましょう。</p>\n<blockquote>\n<p>ターミナルやGit BashはCUIツールと呼ばれ、コマンドを入力してPCを操作するツールです。\nWindowsには<code class=\"language-text\">Powershell</code>や<code class=\"language-text\">command prompt</code>と呼ばれるものもありますが、基本的に<code class=\"language-text\">Git Bash</code>を使ってください。</p>\n</blockquote>\n<blockquote>\n<p>コマンドの左端に<code class=\"language-text\">$</code>がありますが無視してください。システムが出力するコマンドと区別するために使っています。</p>\n</blockquote>\n<p>:one:まずはフォルダーの最上位階層（～）にいることを確認してください。デフォルトでは最上位層（～）にいると思います。\nもしいなければ、次のコマンドで最上位層（～）に移動します。（Chage Directory）</p>\n<p>:warning:先ほどもお伝えしましたが、コマンドの左端の<code class=\"language-text\">$</code>は無視してください。ここでは<code class=\"language-text\">cd ~</code>がコマンドとなります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> ~</code></pre></div>\n<p>:two:秘密鍵と公開鍵を保存するフォルダが存在するか確認するために次のコマンドを打ちます。（List Segments）</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> -al</code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">-a</code>は<code class=\"language-text\">.</code>付きのフォルダやファイルを表示するためのオプションです。\n<code class=\"language-text\">-l</code>は詳細なデータを表示するためのオプションです。</p>\n</blockquote>\n<p><code class=\"language-text\">.ssh/</code>が一覧の中に存在していれば、3は飛ばしてください。デフォルトでは存在しません。</p>\n<p>:three:秘密鍵と公開鍵を保存する<code class=\"language-text\">.ssh</code>フォルダを作る。（MaKe DIRectory）</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> .ssh</code></pre></div>\n<p>再度下のコマンドを実行して<code class=\"language-text\">.ssh</code>フォルダができたのか確認してください。ところでこのコマンドは2でも使いましたね。こういった時は、キーボードの:arrow_up:を押した分だけ、コマンドを再表示することができるので、ぜひ使ってみてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> -al</code></pre></div>\n<p>:four:<code class=\"language-text\">.ssh</code>フォルダに移動する。SSHキーはデフォルトでは<code class=\"language-text\">.ssh/</code>フォルダで生成されますが、念のため移動します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> .ssh</code></pre></div>\n<p>:five:SSHキーを生成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ssh-keygen -t rsa\nEnter <span class=\"token function\">file</span> <span class=\"token keyword\">in</span> <span class=\"token function\">which</span> to save the key <span class=\"token punctuation\">(</span>/Users/<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span>/.ssh/id_rsa<span class=\"token punctuation\">)</span>:\nEnter passphrase <span class=\"token punctuation\">(</span>empty <span class=\"token keyword\">for</span> no passphrase<span class=\"token punctuation\">)</span>:\nEnter same passphrase again:</code></pre></div>\n<p>3回聞かれますがエンターして大丈夫です。</p>\n<p>もう少し詳しく説明すると、最初の質問は「<code class=\"language-text\">~/.ssh</code>フォルダにある<code class=\"language-text\">id_rsa</code>にキーを保存していい？」です。その通りなのでエンター。次の質問は、「SSHキーを使うときのパスワードを入力してください」です。パスワードはいらないのでエンター。次の質問もパスワード確認用なので、エンター。</p>\n<p>:warning:以前作成している場合は、「override?」みたいな質問が来ますのでご注意を。必要がなければ上書きしなくていいです。</p>\n<p>:six:<code class=\"language-text\">ls -al</code>で<code class=\"language-text\">id_rsa</code>が作成されたことを確認してください。次に公開鍵をコピーします。</p>\n<p>Mac</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pbcopy <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa.pub</code></pre></div>\n<p>Windows</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ clip <span class=\"token operator\">&lt;</span> ~/.ssh/id_rsa.pub</code></pre></div>\n<p>:seven:公開鍵をGitHubにアップロードします。</p>\n<ol>\n<li><a href=\"https://github.com/settings/ssh\">https://github.com/settings/ssh</a> を開きます。</li>\n<li>右上にある「Add SSH Key」と書かれた緑色のボタンをクリックします。</li>\n<li>Titleに公開鍵名を入力します。どのようなものでも構いませんが自分で識別できるようにしましょう。</li>\n<li>Keyにさきほどコピーした公開鍵をペーストしてください。</li>\n<li>最後に「Add Key」ボタンをクリックして登録してください。この時GitHubのパスワードを聞かれることがあります。</li>\n<li><a href=\"https://github.com/settings/ssh\">https://github.com/settings/ssh</a> を再度開いて、公開鍵が登録されていることを確認します。</li>\n</ol>\n<p>:seven:GitHubとの接続を確かめます。</p>\n<p>:warning:途中で<code class=\"language-text\">Are you sure you want to continue connecting (yes/no)?</code>と聞かれる場合がありますが、<code class=\"language-text\">yes</code>を入力してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -T git@github.com\nHi Akinori13<span class=\"token operator\">!</span> You've successfully authenticated, but GitHub does not provide shell access.</code></pre></div>\n<h2>第四節 早稲田祭2020のフロントエンドのコードをクローン</h2>\n<h3>1.クローン</h3>\n<ol>\n<li><a href=\"https://github.com/wasedasai/os2020-front\">https://github.com/wasedasai/os2020-front</a> にアクセスします。アクセスできない場合はログインできていないか、早稲田祭チームに追加されてない場合です。チームリーダーに連絡してください。</li>\n<li>「Code」と書かれた緑色のボタンをクリックします。</li>\n<li>HTTPSに赤線が引かれていると思いますが、その右にあるSSHをクリックしてください。</li>\n<li>その下にあるURLをコピーします。右にあるクリップボードのアイコンをクリックすればコピーできます。</li>\n<li><code class=\"language-text\">cd ~</code>で最上位層に移動します。</li>\n<li><code class=\"language-text\">git clone &lt;URL></code>を実行します。<code class=\"language-text\">&lt;URL></code>は削除して、先ほどコピーしたものをペーストしてください。</li>\n<li>実行すると100%って表示されると思います。途中でUsernameとかPasswordを聞かれた場合は、チームに連絡を！</li>\n</ol>\n<h3>2.去年のソースコードを閲覧してみよう！</h3>\n<ol>\n<li>VSCodeを開きます</li>\n<li>左上のファイル→フォルダーを開くをクリック！</li>\n<li><code class=\"language-text\">os2020-front</code>をクリックして、フォルダーの選択をします。</li>\n<li>src/pages/index.vueには2020年のフロントエンドのソースコードが書いてあります。</li>\n</ol>\n<h2>お疲れ様！！</h2>\n<p>次回は去年のソースコードを実際にブラウザで見れるようにします。</p>\n<p><img src=\"https://media.giphy.com/media/3o7abB06u9bNzA8lu8/giphy.gif?cid=ecf05e47bhbdz7hr6xgdcp5nzgdokl0gbzm3qw4o1g6qsx5p&#x26;rid=giphy.gif&#x26;ct=g\" alt=\"gif\"></p>\n<h2>追記</h2>\n<p>注意点をいくつか書いておきます。</p>\n<ul>\n<li>どうしてもうまくいかない場合は、再起動したりGitを再インストールすることをお勧めします。</li>\n<li>公開鍵認証のキーはとても長いので安全性が担保されており、UsernameとPasswordによる認証は短いので安全性が低いです。公開鍵認証の他に個人用アクセストークンというPasswordをとっても長くしたものを利用することもできます。SSHが難しそうであれば、それも一案です。</li>\n<li><code class=\"language-text\">ssh-keygen -t rsa</code>は、本来は<code class=\"language-text\">ssh-keygen -t ed25519 -C \"your_email@example.com\"</code>や<code class=\"language-text\">ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"</code>を実行することを推奨されています。</li>\n<li><code class=\"language-text\">ssh-keygen -t rsa</code>でパスワードを入力しませんでしたが、本来は入力すべきです。</li>\n<li><code class=\"language-text\">ssh -T git@github.com</code>を実行したときに表示される<code class=\"language-text\">fingerprint</code>は、<a href=\"https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints\">ここ</a>と同一であるかを本来は確認すべきです。</li>\n</ul>","frontmatter":{"title":"Basic Git & GitHub"}}},"pageContext":{"slug":"/3/"}},
    "staticQueryHashes": ["3649515864"]}